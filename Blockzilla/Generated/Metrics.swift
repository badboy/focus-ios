// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser. DO NOT EDIT. DO NOT COMMIT.

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */



import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    enum Shortcuts {
        enum RemovedKeys: Int32, ExtraKeys {
            case context = 0

            public func index() -> Int32 {
                return self.rawValue
            }
        }

        enum OpenedKeys: Int32, ExtraKeys {
            case context = 0

            public func index() -> Int32 {
                return self.rawValue
            }
        }

        /// Records the current number of shortcuts present.
        static let count = QuantityMetricType( // generated from shortcuts.count
            category: "shortcuts",
            name: "count",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Records an event when the user adds a shortcut.
        static let added = EventMetricType<NoExtraKeys, NoExtras>( // generated from shortcuts.added
            category: "shortcuts",
            name: "added",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: false,
            allowedExtraKeys: []
        )

        /// Records an event when the user removes a shortcut.
        static let removed = EventMetricType<RemovedKeys, NoExtras>( // generated from shortcuts.removed
            category: "shortcuts",
            name: "removed",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: false,
            allowedExtraKeys: ["context"]
        )

        /// Records an event when user opens a shortcut. Includes the
        /// context of the tile.
        static let opened = EventMetricType<OpenedKeys, NoExtras>( // generated from shortcuts.opened
            category: "shortcuts",
            name: "opened",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: false,
            allowedExtraKeys: ["context"]
        )

    }

    enum LegacyIds {
        /// The client id from legacy telemetry.
        static let clientId = UuidMetricType( // generated from legacy.ids.client_id
            category: "legacy.ids",
            name: "client_id",
            sendInPings: ["deletion-request"],
            lifetime: .user,
            disabled: false
        )

    }

}
